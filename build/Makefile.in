# Output settings
OUTTONULL = >@outtonull@
ERRTONULL = 2>@outtonull@
ERRTOOUT  = 2>&1
SILENT    = @silent@
ECHO      = @echo@
VERBOSE   = @verbose@
@silent@

# Compiler configuration
CC       = @cc@
CFLAGS   = @cflags@
CINCLUDE = -I3rdparty/apr/include -I3rdparty/libatomic_ops/src -I$(TOM)/ -I3rdparty/sha1/ -Isrc -I3rdparty
LD       = @link@
LDFLAGS  = @ldflags@
LLIBS    = @llibs@
COUTO    = @couto@
LOUTO    = @louto@

# File extensions
EXE      = @exe@
O        = @o@
DLL      = @dll@
DOTLIB   = @dotlib@

# Tool configuration
MAKE = @make@ @nologo@
RM   = @rm@
RMRF = @rmrf@
CAT  = @cat@

# APR related
APR_LIB = @apr_lib@
APR_BUILD_LINE = @apr_build_line@

# libatomic_ops related
LAO_LIB = @lao_lib@
LAO_BUILD_LINE = @lao_build_line@
# the following will be the same as LAO_LIB if it's to be built, otherwise blank
BUILD_LAO_LIB = @lao_whether_build@

# dyncall related
DYNCALL_BUILD = @dyncall_build@
DYNCALL_LIBS = 3rdparty/dyncall/dyncall/libdyncall_s@dotlib@ \
  3rdparty/dyncall/dyncallback/libdyncallback_s@dotlib@ \
  3rdparty/dyncall/dynload/libdynload_s@dotlib@

# sha1 related
SHA1_LIB = 3rdparty/sha1/sha1$(O)

# libtommath related
TOM = 3rdparty/libtommath

.SUFFIXES: .c @o@ @dotlib@

{$(TOM)}.c{$(TOM)}$(O):
	@$(MAKE) /S$(MAKEFLAGS) $(LIBTOMMATH_H) $(OUTTONULL) $(ERRTONULL)
	cd $(TOM) && $(CC) -c $(COUTO)$(<F:.c=@o@) -I. $(CFLAGS) $(<F)

{src/core}.c{src/core}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/io}.c{src/io}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/gc}.c{src/gc}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/6model}.c{src/6model}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/6model/reprs}.c{src/6model/reprs}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/strings}.c{src/strings}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src/math}.c{src/math}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

{src}.c{src}$(O):
	@$(MAKE) /NOLOGO /S$(MAKEFLAGS) $(HEADERS) $(OUTTONULL) $(ERRTONULL)
	$(CC) $(CINCLUDE) $(CFLAGS) -c $(COUTO)$(<:.c=@o@) $(<)

#{$(TOM)}.c{$(TOM)}@dotlib@:

# libtommath files
LIBTOMMATH_BIN = $(TOM)\bncore$(O) $(TOM)\bn_error$(O) $(TOM)\bn_fast_mp_invmod$(O) \
    $(TOM)\bn_fast_mp_montgomery_reduce$(O) $(TOM)\bn_fast_s_mp_mul_digs$(O) \
    $(TOM)\bn_fast_s_mp_mul_high_digs$(O) $(TOM)\bn_fast_s_mp_sqr$(O) \
    $(TOM)\bn_mp_2expt$(O) $(TOM)\bn_mp_abs$(O) $(TOM)\bn_mp_add_d$(O) \
    $(TOM)\bn_mp_addmod$(O) $(TOM)\bn_mp_add$(O) $(TOM)\bn_mp_and$(O) \
    $(TOM)\bn_mp_clamp$(O) $(TOM)\bn_mp_clear_multi$(O) $(TOM)\bn_mp_clear$(O) \
    $(TOM)\bn_mp_cmp_d$(O) $(TOM)\bn_mp_cmp_mag$(O) $(TOM)\bn_mp_cmp$(O) \
    $(TOM)\bn_mp_cnt_lsb$(O) $(TOM)\bn_mp_copy$(O) $(TOM)\bn_mp_count_bits$(O) \
    $(TOM)\bn_mp_div_2d$(O) $(TOM)\bn_mp_div_2$(O) $(TOM)\bn_mp_div_3$(O) \
    $(TOM)\bn_mp_div_d$(O) $(TOM)\bn_mp_div$(O) $(TOM)\bn_mp_dr_is_modulus$(O) \
    $(TOM)\bn_mp_dr_reduce$(O) $(TOM)\bn_mp_dr_setup$(O) $(TOM)\bn_mp_exch$(O) \
    $(TOM)\bn_mp_expt_d$(O) $(TOM)\bn_mp_exptmod_fast$(O) $(TOM)\bn_mp_exptmod$(O) \
    $(TOM)\bn_mp_exteuclid$(O) $(TOM)\bn_mp_fread$(O) $(TOM)\bn_mp_fwrite$(O) \
    $(TOM)\bn_mp_gcd$(O) $(TOM)\bn_mp_get_int$(O) $(TOM)\bn_mp_get_long$(O) \
    $(TOM)\bn_mp_grow$(O) $(TOM)\bn_mp_init_copy$(O) $(TOM)\bn_mp_init_multi$(O) \
    $(TOM)\bn_mp_init$(O) $(TOM)\bn_mp_init_set_int$(O) $(TOM)\bn_mp_init_set$(O) \
    $(TOM)\bn_mp_init_size$(O) $(TOM)\bn_mp_invmod$(O) $(TOM)\bn_mp_invmod_slow$(O) \
    $(TOM)\bn_mp_is_square$(O) $(TOM)\bn_mp_jacobi$(O) $(TOM)\bn_mp_karatsuba_mul$(O) \
    $(TOM)\bn_mp_karatsuba_sqr$(O) $(TOM)\bn_mp_lcm$(O) $(TOM)\bn_mp_lshd$(O) \
    $(TOM)\bn_mp_mod_2d$(O) $(TOM)\bn_mp_mod_d$(O) $(TOM)\bn_mp_mod$(O) \
    $(TOM)\bn_mp_montgomery_calc_normalization$(O) $(TOM)\bn_mp_montgomery_reduce$(O) \
    $(TOM)\bn_mp_montgomery_setup$(O) $(TOM)\bn_mp_mul_2d$(O) $(TOM)\bn_mp_mul_2$(O) \
    $(TOM)\bn_mp_mul_d$(O) $(TOM)\bn_mp_mulmod$(O) $(TOM)\bn_mp_mul$(O) \
    $(TOM)\bn_mp_neg$(O) $(TOM)\bn_mp_n_root$(O) $(TOM)\bn_mp_or$(O) \
    $(TOM)\bn_mp_prime_fermat$(O) $(TOM)\bn_mp_prime_is_divisible$(O) \
    $(TOM)\bn_mp_prime_is_prime$(O) $(TOM)\bn_mp_prime_miller_rabin$(O) \
    $(TOM)\bn_mp_prime_next_prime$(O) $(TOM)\bn_mp_prime_rabin_miller_trials$(O) \
    $(TOM)\bn_mp_prime_random_ex$(O) $(TOM)\bn_mp_radix_size$(O) \
    $(TOM)\bn_mp_radix_smap$(O) $(TOM)\bn_mp_rand$(O) $(TOM)\bn_mp_read_radix$(O) \
    $(TOM)\bn_mp_read_signed_bin$(O) $(TOM)\bn_mp_read_unsigned_bin$(O) \
    $(TOM)\bn_mp_reduce_2k_l$(O) $(TOM)\bn_mp_reduce_2k$(O) \
    $(TOM)\bn_mp_reduce_2k_setup_l$(O) $(TOM)\bn_mp_reduce_2k_setup$(O) \
    $(TOM)\bn_mp_reduce_is_2k_l$(O) $(TOM)\bn_mp_reduce_is_2k$(O) \
    $(TOM)\bn_mp_reduce$(O) $(TOM)\bn_mp_reduce_setup$(O) $(TOM)\bn_mp_rshd$(O) \
    $(TOM)\bn_mp_set_int$(O) $(TOM)\bn_mp_set_long$(O) $(TOM)\bn_mp_set$(O) \
    $(TOM)\bn_mp_shrink$(O) $(TOM)\bn_mp_signed_bin_size$(O) $(TOM)\bn_mp_sqrmod$(O) \
    $(TOM)\bn_mp_sqr$(O) $(TOM)\bn_mp_sqrt$(O) $(TOM)\bn_mp_sub_d$(O) \
    $(TOM)\bn_mp_submod$(O) $(TOM)\bn_mp_sub$(O) $(TOM)\bn_mp_toom_mul$(O) \
    $(TOM)\bn_mp_toom_sqr$(O) $(TOM)\bn_mp_toradix_n$(O) $(TOM)\bn_mp_toradix$(O) \
    $(TOM)\bn_mp_to_signed_bin_n$(O) $(TOM)\bn_mp_to_signed_bin$(O) \
    $(TOM)\bn_mp_to_unsigned_bin_n$(O) $(TOM)\bn_mp_to_unsigned_bin$(O) \
    $(TOM)\bn_mp_unsigned_bin_size$(O) $(TOM)\bn_mp_xor$(O) \
    $(TOM)\bn_mp_zero$(O) $(TOM)\bn_prime_tab$(O) $(TOM)\bn_reverse$(O) \
    $(TOM)\bn_s_mp_add$(O) $(TOM)\bn_s_mp_exptmod$(O) $(TOM)\bn_s_mp_mul_digs$(O) \
    $(TOM)\bn_s_mp_mul_high_digs$(O) $(TOM)\bn_s_mp_sqr$(O) $(TOM)\bn_s_mp_sub$(O) \

LIBTOMMATH_H = $(TOM)\tommath_class.h $(TOM)\tommath.h $(TOM)\tommath_superclass.h

# Various collections of libraries, objects and sources.
THIRDPARTY_LIBS = $(APR_LIB) $(BUILD_LAO_LIB) $(SHA1_LIB) $(DYNCALL_LIBS)
CORE_OBJS = src/core/args$(O) src/core/exceptions$(O) src/core/interp$(O) src/core/threadcontext$(O) \
            src/core/compunit$(O) src/core/bytecode$(O) src/core/frame$(O) src/core/validation$(O) \
            src/core/bytecodedump$(O) src/core/threads$(O) src/core/ops$(O) src/core/hll$(O) \
            src/core/loadbytecode$(O) src/core/coerce$(O) \
            src/gc/orchestrate$(O) src/gc/allocation$(O) src/gc/worklist$(O) src/gc/roots$(O) \
            src/io/fileops$(O) src/io/socketops$(O) src/io/dirops$(O) src/io/procops$(O) \
            src/gc/collect$(O) src/gc/gen2$(O) src/gc/wb$(O) src/6model/reprs$(O) \
            src/6model/reprconv$(O) src/6model/containers$(O) src/6model/reprs/MVMString$(O) \
            src/6model/reprs/MVMArray$(O) src/6model/reprs/MVMHash$(O) \
            src/6model/reprs/MVMCFunction$(O) src/6model/reprs/KnowHOWREPR$(O) \
            src/6model/reprs/KnowHOWAttributeREPR$(O) src/6model/reprs/P6str$(O) \
            src/6model/reprs/P6opaque$(O) src/6model/reprs/MVMCode$(O) \
            src/6model/reprs/MVMOSHandle$(O) src/6model/reprs/P6int$(O) src/6model/reprs/P6num$(O) \
            src/6model/reprs/Uninstantiable$(O) src/6model/reprs/HashAttrStore$(O) \
            src/6model/reprs/MVMThread$(O) src/6model/reprs/MVMIter$(O) \
            src/6model/reprs/MVMContext$(O) src/6model/reprs/SCRef$(O) \
            src/6model/reprs/Lexotic$(O) src/6model/reprs/MVMCallCapture$(O) \
            src/6model/reprs/P6bigint$(O) src/6model/reprs/NFA$(O) \
            src/6model/6model$(O) src/6model/bootstrap$(O) src/6model/sc$(O) \
            src/6model/serialization$(O) src/strings/ascii$(O) \
            src/strings/utf8$(O) src/strings/ops$(O) src/strings/unicode$(O) \
            src/strings/latin1$(O) src/strings/utf16$(O) src/math/bigintops$(O) src/moarvm$(O)
MAIN_OBJ  = src/main$(O)
HEADERS   = src/moarvm.h src/6model/6model.h src/core/instance.h src/core/threadcontext.h \
            src/core/args.h src/core/exceptions.h src/core/interp.h src/core/frame.h \
            src/core/compunit.h src/core/bytecode.h src/core/ops.h src/core/validation.h \
            src/core/bytecodedump.h src/core/threads.h src/core/hll.h \
            src/core/loadbytecode.h src/core/coerce.h \
            src/io/fileops.h src/io/socketops.h src/io/dirops.h src/io/procops.h src/gc/orchestrate.h \
            src/gc/allocation.h src/gc/worklist.h src/gc/collect.h src/gc/roots.h src/gc/gen2.h \
            src/gc/wb.h src/6model/reprs.h src/6model/reprconv.h src/6model/bootstrap.h \
            src/6model/serialization.h src/6model/containers.h src/6model/reprs/MVMString.h \
            src/6model/reprs/MVMArray.h src/6model/reprs/MVMHash.h src/6model/reprs/MVMCFunction.h \
            src/6model/reprs/KnowHOWREPR.h src/6model/reprs/KnowHOWAttributeREPR.h \
            src/6model/reprs/P6opaque.h src/6model/reprs/MVMCode.h src/6model/reprs/P6str.h \
            src/6model/reprs/MVMOSHandle.h src/6model/reprs/P6int.h src/6model/reprs/P6num.h \
            src/6model/reprs/Uninstantiable.h src/6model/reprs/HashAttrStore.h \
            src/6model/reprs/MVMThread.h src/6model/reprs/MVMIter.h src/6model/reprs/MVMContext.h \
            src/6model/reprs/SCRef.h src/6model/reprs/Lexotic.h src/6model/reprs/MVMCallCapture.h \
            src/6model/reprs/P6bigint.h src/6model/reprs/NFA.h \
            src/6model/sc.h src/strings/unicode_gen.h \
            src/strings/ascii.h src/strings/utf8.h src/strings/ops.h src/strings/unicode.h \
            src/strings/latin1.h src/strings/utf16.h src/math/bigintops.h \
            3rdparty/uthash.h src/gen/config.h 3rdparty/apr/include/apr.h

# Main target
moarvm$(EXE): $(THIRDPARTY_LIBS) $(LIBTOMMATH_BIN) $(CORE_OBJS) $(MAIN_OBJ)
	$(LD) $(LOUTO)moarvm$(EXE) $(LDFLAGS) $(CORE_OBJS) $(MAIN_OBJ) $(LIBTOMMATH_BIN) $(THIRDPARTY_LIBS) $(LLIBS)

#moarvm$(DLL): $(THIRDPARTY_LIBS) $(LIBTOMMATH_BIN) $(CORE_OBJS) $(MAIN_OBJ)
#	$(LD) $(LOUTO)moarvm$(DLL) $(LDFLAGS) $(CORE_OBJS) $(MAIN_OBJ) $(LIBTOMMATH_BIN) $(THIRDPARTY_LIBS) $(LLIBS)

# APR
$(APR_LIB):
	$(APR_BUILD_LINE)

3rdparty/apr/include/apr.h: $(APR_LIB)

# libatomic_ops
$(LAO_LIB):
	$(LAO_BUILD_LINE)

# sha1
$(SHA1_LIB): 3rdparty/sha1/sha1.h
	cd 3rdparty/sha1 && $(CC) -c $(COUTO)sha1$(O) -I. $(CFLAGS) sha1.c

$(DYNCALL_LIBS):
	$(DYNCALL_BUILD)

test:
	@$(ECHO) "Please build nqp-cc and run the tests in there"

# Generated unicode database
src/strings/unicode.c: src/strings/unicode_db.c src/strings/unicode_ops.c
	$(CAT) src/strings/unicode_db.c src/strings/unicode_ops.c >src/strings/unicode.c

# Cleanup.
clean:
	$(RM) moarvm$(EXE) $(ERRTONULL)
	$(RM) src/*$(O) src/6model/*$(O) src/6model/reprs/*$(O) src/core/*$(O) src/gc/*$(O) src/strings/*$(O) src/strings/unicode.c src/io/*$(O) src/math/*$(O) $(ERRTONULL)
	$(RM) $(TOM)/*$(O) $(ERRTONULL)

realclean: clean
	$(RM) $(DYNCALL_LIBS) $(ERRTONULL)
	cd 3rdparty/dyncall && $(MAKE) -F Nmakefile clean $(ERRTONULL)
	cd 3rdparty/dyncall && $(RM) ConfigVars $(ERRTONULL)
	cd 3rdparty/dyncall/dyncall && $(RM) *$(O) *.lib $(ERRTONULL)
	cd 3rdparty/sha1 && $(RM) *$(O) *.pdb $(ERRTONULL)
    cd 3rdparty/apr && $(MAKE) -F Makefile.win clean $(ERRTONULL)
	$(RM) 3rdparty/apr/build/x64/LibR/*$(O) 3rdparty/apr/Makefile $(ERRTONULL)
	$(RM) nqp-cc/Makefile $(ERRTONULL)
	$(RM) nqp-cc/nqp-mo.moarvm $(ERRTONULL)
	$(RM) nqp-cc/NQPCOREMoar.setting.moarvm $(ERRTONULL)
	$(RM) nqp-cc/NQPHLLMoar.moarvm $(ERRTONULL)
	$(RM) nqp-cc/QASTNodesMoar.moarvm $(ERRTONULL)
	$(RM) nqp-cc/QRegexMoar.moarvm $(ERRTONULL)
	$(RM) nqp-cc/src/compiler.obj $(ERRTONULL)
	$(RM) nqp-cc/src/ops.obj $(ERRTONULL)
	$(RM) nqp-cc/src/ops/mvmcc_ops.pdb $(ERRTONULL)
	$(RM) nqp-cc/src/ops/vc100.pdb $(ERRTONULL)
	$(RM) nqp-cc/src/vc100.pdb $(ERRTONULL)
	$(RM) nqp-cc/temp.moarvm $(ERRTONULL)
	$(RM) nqp-cc/temp.output $(ERRTONULL) $(ERRTONULL)
	$(RM) nqp-cc/ModuleLoader.class $(ERRTONULL)
	$(RM) nqp-cc/src/compiler.o $(ERRTONULL)
	$(RM) nqp-cc/src/ops.o $(ERRTONULL)
	$(RM) nqp-cc/src/ops/mvmcc_ops.so $(ERRTONULL)
	$(RM) src/strings/unicode.c $(ERRTONULL)
	$(RM) vc100.pdb $(ERRTONULL)
	$(RM) moarvm.ilk $(ERRTONULL)
	$(RM) moarvm.pdb $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/config.log $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/config.status $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/pkgconfig/atomic_ops-uninstalled.pc $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/pkgconfig/atomic_ops.pc $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/atomic_ops.o $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/config.h $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/libatomic_ops.a $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/stamp-h1 $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/tests/list_atomic.i $(ERRTONULL)
    $(RM) $(TOM)/*$(O) $(ERRTONULL)
	cd $(TOM) && $(RM) *.pdb $(ERRTONULL)
	$(RM) 3rdparty/sha1/sha1.o $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/Makefile $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/doc/Makefile $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/Makefile $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/atomic_ops/Makefile $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/src/atomic_ops/sysdeps/Makefile $(ERRTONULL)
	$(RM) 3rdparty/libatomic_ops/tests/Makefile $(ERRTONULL)
	$(RMRF) 3rdparty/libatomic_ops/src/.deps $(ERRTONULL)
	$(RMRF) 3rdparty/libatomic_ops/tests/.deps $(ERRTONULL)
	$(RMRF) 3rdparty/apr/build/x64 $(ERRTONULL)
	$(RMRF) 3rdparty/apr/x64 $(ERRTONULL)
	$(RM) 3rdparty/apr/include/apr.h $(ERRTONULL)
	$(RM) 3rdparty/dyncall/dyncallback/*.obj 3rdparty/dyncall/dynload/*.obj $(ERRTONULL)
	$(RM) src/gen/config.h $(ERRTONULL)
	@mkfiledel@ $(OUTTONULL) $(ERRTONULL)

